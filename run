#!/bin/sh
APP_NAME=myapi
NET_NAME=bridge1
# specify name here to automatically start and stop database
DBAPP_NAME=app_db

update_package_json() {
  echo "const fs = require('fs'), PKG='package.json', pkg = JSON.parse(fs.readFileSync(PKG, 'utf8'))
pkg.main = 'src/index.js'
pkg.engines = { node : '>=10.0.0' }
pkg.scripts = {
  compile: 'tsc',
  start: 'node ./dist/server.js',
  dev: 'webpack --watch',
  test: 'yarn jest',
  sq: 'sequelize-cli',
  'lint': 'eslint ./src ./database',
  'lint:fix': 'eslint --fix ./src ./database',
  'pretty': 'prettier -c ./src',
  'pretty:fix': 'prettier -w ./src'
}
fs.writeFileSync(PKG, JSON.stringify(pkg, null, 2));
" | node -
}


app_init() { 
  yarn init -y
  # add expressjs and graphql
  APPDEPS="ajv ajv-formats lodash moment-timezone chance graphql 
    express apollo-server-express sequelize pg jwt-simple axios
    aws-serverless-express apollo-server-lambda"

  yarn add $APPDEPS

  # Add webpack, babel transpiler, eslint, prettier and jest/supertest
  yarn add -D webpack webpack-cli webpack-node-externals raw-loader \
    typescript ts-loader @types/node @types/validator \
    eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin \
    prettier eslint-plugin-prettier eslint-config-prettier \
    jest ts-jest @types/jest supertest @types/supertest jest-transform-graphql \
    sequelize-cli \
    serverless serverless-offline serverless-domain-manager serverless-webpack
  
  update_package_json
}


app_reset() {
  rm -rf ./node_modules ./dist
  rm package.json yarn.lock package-lock.json yarn-error.log
}


auto_start_db() {
  docker ps --format "{{.Names}}" | grep "$DBAPP_NAME" > /dev/null
  if [ ! $? = 0 ]; then
    ./db start;
    echo ">> Database ($DBAPP_NAME) started"
  else
    echo ">> Database ($DBAPP_NAME) already running"
  fi
}

app_start() {
  # start database server
  if [ ! "" = "$DBAPP_NAME" ]; then
    auto_start_db;
    sleep 5
  fi

  # run node file
  yarn sls offline start --stage dev
}

auto_stop_db() {
  docker ps --format "{{.Names}}" | grep "$DBAPP_NAME" > /dev/null
  if [ $? = 0 ]; then ./db stop; fi
}

app_stop() {
  # stop database server
  echo "Use Ctrl+C to stop app"
  if [ ! "" = "$DBAPP_NAME" ]; then auto_stop_db; fi
}


app_build() {
  echo "Building"
  if [ ! -d "./dist" ]; then mkdir ./dist; fi
  if [ -d "./public" ]; then cp -f ./public/* ./dist/; fi
  # yarn webpack --mode development $1
  yarn webpack --mode production $1
}


app_test() {
  yarn jest --env=node --colors --coverage ./src
}


app_deploy_awslambda() {
  echo "Deploying"

}


app_debug() {
  DEPS=$(echo "const fs = require('fs'), PKG='package.json', pkg = JSON.parse(fs.readFileSync(PKG, 'utf8'))
console.log(JSON.stringify(pkg.dependencies,null,2))
" | node -)
echo $DEPS
}


app_dist() {
  node dist/server.js
}

app_hook_link() {
  ln -s ../../hooks/pre-commit .git/hooks/pre-commit
}


# import environment variables for local testing
set -a; if [ -f '.env' ]; then . ./.env; fi; set +a

if [ "$1" = "init" ]; then app_init; exit; fi
if [ "$1" = "reset" ]; then app_reset; exit; fi
if [ "$1" = "hook" ]; then app_hook_link; exit; fi

if [ "$1" = "start" ]; then app_start; exit; fi
if [ "$1" = "stop" ]; then app_stop; exit; fi

if [ "$1" = "build" ]; then app_build $2; exit; fi
if [ "$1" = "dist" ]; then app_dist $2; exit; fi

if [ "$1" = "test" ]; then app_test; exit; fi
if [ "$1" = "lint" ]; then yarn lint; exit; fi

if [ "$1" = "deploy" ]; then app_deploy_awslambda; exit; fi
if [ "$1" = "deploy-uat" ]; then app_deploy_awslambda; exit; fi

if [ "$1" = "debug" ]; then app_debug; exit; fi

echo "Command not found"
