#!/bin/sh
# MySql database helper script

NET_NAME=bridge1
DBAPP_NAME=app_db

auto_create_bridge() {
  docker network ls | grep "$NET_NAME" > /dev/null
  if [ ! $? = 0 ]; then docker network create $NET_NAME; fi
}

app_set_environment() {
  NODE_SET_ENV=$(echo "print=console.log; dbconn = process.env.DB_URL.match(/mysql:(.*)/);
  dbparts = dbconn[1].split(';'); dbfields = {}
  dbparts.forEach(item => { kv = item.match(/(.*)=(.*)/); dbfields[kv[1]] = kv[2] })
  print('DB_USER='+dbfields['user']);
  print('DB_PASSWORD=' + decodeURIComponent(dbfields['password']) );
  print('DB_HOST=' + dbfields['host']);
  print('DB_PORT=' + dbfields['port']);
  print('DB_NAME=' + dbfields['dbname']);
" | node -)
  eval "$NODE_SET_ENV"
  NODE_SET_ENV=''
}


docker_dbstart() {
  if [ ! -d .docker/data ]; then mkdir .docker/data; fi

  docker_stop
  docker run -dit --rm \
  -p $DB_PORT:3306 \
  --net $NET_NAME \
  -v $PWD/.docker/data:/var/lib/mysql \
  -e MYSQL_ROOT_PASSWORD=$DB_PASSWORD \
  -e MYSQL_USER=$DB_USER \
  -e MYSQL_PASSWORD=$DB_PASSWORD \
  --name="$DBAPP_NAME" mysql:5.7.33
}

docker_dbstop() {
  docker stop -t 2 $DBAPP_NAME
}

docker_dbshow() {
  # fix file permissions so that user can see them
  echo "Updating file permissions $UID"
  # docker exec $DBAPP_NAME chown -R postgres:$UID /var/lib/postgresql/data
  # docker exec $DBAPP_NAME chmod -R g+rwx /var/lib/postgresql/data
}


# Create database and user according to .env file values
docker_dbinit() {
  echo "CREATING: $DB_NAME"
  docker exec $DBAPP_NAME /usr/bin/mysql -h localhost \
    --user="root" --password="$DB_PASSWORD" \
    -e "CREATE DATABASE $DB_NAME; GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%';"
}

docker_dbimport() {
  docker exec -i $DBAPP_NAME /usr/bin/mysql -h localhost \
    --user="$DBUSER_NAME" --password="$DB_PASSWORD" $DB_NAME < $1;
}

docker_dbexport() {
  docker exec -i $DBAPP_NAME /usr/bin/mysqldump -h localhost \
    --user="$DBUSER_NAME" --password="$DB_PASSWORD" $DB_NAME \
    --ignore-table=$DB_NAME.sequelize_seed --ignore-table=$DB_NAME.sequelize_migration > dump.sql
}

app_sequelize() {
  yarn sequelize --env dev $*
}

# import environment variables for local testing
set -a; if [ -f '.env' ]; then . ./.env; fi; app_set_environment; set +a

# database commands
if [ "$1" == "start" ]; then auto_create_bridge; docker_dbstart; exit; fi
if [ "$1" == "stop" ]; then docker_dbstop; exit;  fi

if [ "$1" = "init" ]; then docker_dbinit $2; exit; fi
if [ "$1" = "show" ]; then docker_dbshow $2; exit; fi

if [ "$1" == "export" ]; then docker_dbexport $2; exit; fi
if [ "$1" == "import" ]; then docker_dbimport $2; exit; fi

if [ "$1" = "sq" ]; then shift 1; app_sequelize $*; exit; fi

echo "Command not found"
